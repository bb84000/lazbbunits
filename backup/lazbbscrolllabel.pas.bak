unit lazbbscrolllabel;

{$mode objfpc}{$H+}

interface

uses
  Classes, StdCtrls, ExtCtrls, LResources,  Controls, graphics;

type
  TScrollLabel = class(TCustomLabel)
  private
    FOffset: integer;
    FScrollInterval: integer;
    FScrollCaption:string;
    FScrolling: boolean;
    FStep: integer;
    FTimer: TTimer;
    TxtWidth: Integer;
    procedure OnTimer(Sender: TObject);
    procedure SetScrolling(AValue: boolean);
    procedure SetScrollRefresh(aValue: integer);
    procedure SetScrollCaption(aValue: string);
  protected
    procedure DoMeasureTextPosition(var TextTop: integer; var TextLeft: integer);
      override;

  public
    offset: integer;
    txtlength: integer;
    constructor Create(anOwner: TComponent);  override;
    procedure Paint; override;
  published
    property font;
    property ScrollInterval: integer read FScrollInterval write SetScrollRefresh default 100;
    property Scrolling: boolean read FScrolling write SetScrolling default True;
    property ScrollCaption: string read FScrollCaption write SetSCrollCaption;
  end;

procedure Register;

implementation

procedure Register;
begin
  {$I lazbbscrolllabel_icon.lrs}
  RegisterComponents('lazbbComponents',[TScrollLabel]);
end;

procedure TSCrollLabel.OnTimer(Sender: TObject);
begin
  Dec(FOffset, FStep);
  Invalidate;
end;

procedure TSCrollLabel.SetScrollCaption(AValue: string);
begin
  if FScrollCaption=AValue then Exit;
  FScrollCaption:= AValue;
  Invalidate;
end;

procedure TSCrollLabel.SetScrolling(AValue: boolean);
begin
  if FScrolling=AValue then Exit;
  FScrolling:=AValue;
  FTimer.Enabled:=FScrolling;
end;

procedure TSCrollLabel.SetScrollRefresh(aValue: integer);
begin
  if FScrollInterval=aValue then Exit;
  FScrollInterval:=aValue;
  FTimer.Interval:=aValue;
  Invalidate;
end;

procedure TSCrollLabel.Paint;
var
  txtStyle : TTextStyle;
  R : TRect;
  TextLeft, TextTop: integer;
  OldFontColor: TColor;
begin
  R := Rect(0,0,Width,Height);
  with Canvas do
  begin
    TxtWidth:= TextWidth(FScrollCaption);
  if (Color<>clNone) and not Transparent then
    begin
      Brush.Style:=bsSolid;
      FillRect(R);
    end;
    Brush.Style:=bsClear;
    Font := Self.Font;
    FillChar(txtStyle,SizeOf(txtStyle),0);
    with txtStyle do
    begin
      Alignment := BidiFlipAlignment(Self.Alignment, UseRightToLeftAlignment);
      Layout := Self.Layout;
      Opaque := (Color<>clNone) and not Transparent;
      WordBreak := wordWrap;
      SingleLine:= not WordWrap and not HasMultiLine;
      Clipping := True;
      ShowPrefix := ShowAccelChar;
      SystemFont := False;
      RightToLeft := UseRightToLeftReading;
      ExpandTabs := True;
    end;
    DoMeasureTextPosition(TextTop, TextLeft);
    OldFontColor := Font.Color;
    if not IsEnabled then
    begin
      Font.Color := clBtnHighlight;
      TextRect(R, TextLeft + 1 + FOffset, TextTop + 1, FScrollCaption, txtStyle);
      Font.Color := clBtnShadow;
    end;
    TextRect(R, TextLeft+FOffset, TextTop, FScrollCaption+' '+FSCrollCaption, txtStyle);
    Font.Color := OldFontColor;
    Offset:= abs(TextLeft +FOffset);
    txtlength:=TxtWidth;
    // allow continuously restart
    if abs(TextLeft + FOffset) > TxtWidth then
    FOffset:= 0;
  end;
end;

procedure TSCrollLabel.DoMeasureTextPosition(var TextTop: integer;
  var TextLeft: integer);
begin
  inherited DoMeasureTextPosition(TextTop, TextLeft);
  INc(TextLeft, FOffset);
end;

constructor TSCrollLabel.Create(anOwner: TComponent);
begin
  inherited Create(anOwner);

  AutoSize:=False;
  FScrollCaption:= Caption;
  FScrollInterval:=100;
  FScrolling:=True;
  FStep:=1;
  FTimer:=TTimer.Create(Self);
  FTimer.OnTimer:=@OnTimer;
  FTimer.Interval:=FScrollInterval;
  FTimer.Enabled:=FScrolling;
  Parent:= TWinControl(anOwner);
  //TxtWidth:= Canvas.TextWidth(Text);
end;


end.
